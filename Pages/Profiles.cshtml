@page
@model SteamCmdWeb.Pages.ProfilesModel
@{
    ViewData["Title"] = "Danh sách Profile";
}

<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-list-check me-2"></i>
            Danh sách Profile Game
        </h5>
        <div>
            <button id="refreshBtn" class="btn btn-outline-primary btn-sm me-2">
                <i class="bi bi-arrow-clockwise me-1"></i> Làm mới
            </button>
            <a href="/Profiles" class="btn btn-primary btn-sm">
                <i class="bi bi-grid-3x3-gap me-1"></i> Xem dạng lưới
            </a>
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover" id="profilesTable">
                <thead>
                    <tr>
                        <th style="width: 50px;">#</th>
                        <th>Tên Game</th>
                        <th>App ID</th>
                        <th>Đường dẫn</th>
                        <th style="width: 120px;">Trạng thái</th>
                        <th style="width: 150px;">Chạy lần cuối</th>
                        <th style="width: 120px;">Thao tác</th>
                    </tr>
                </thead>
                <tbody id="profilesList">
                    <tr>
                        <td colspan="7" class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2">Đang tải danh sách profile...</p>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Xác nhận xóa</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa game profile "<span id="deleteGameName"></span>"?</p>
                <p class="text-danger">Lưu ý: Hành động này không thể hoàn tác!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title" id="detailsModalLabel">Chi tiết Profile</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <h6>Thông tin chung</h6>
                            <table class="table table-sm table-dark mb-0">
                                <tr><td width="35%">ID:</td><td id="detail-id"></td></tr>
                                <tr><td>Tên Game:</td><td id="detail-name"></td></tr>
                                <tr><td>App ID:</td><td id="detail-appid"></td></tr>
                                <tr><td>Đường dẫn:</td><td id="detail-path"></td></tr>
                            </table>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <h6>Thông tin khác</h6>
                            <table class="table table-sm table-dark mb-0">
                                <tr><td width="35%">Trạng thái:</td><td id="detail-status"></td></tr>
                                <tr><td>Tài khoản:</td><td id="detail-account"></td></tr>
                                <tr><td>Tham số:</td><td id="detail-arguments"></td></tr>
                                <tr><td>Chạy lần cuối:</td><td id="detail-lastrun"></td></tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-info" id="copyProfileBtn">
                    <i class="bi bi-clipboard me-1"></i> Sao chép
                </button>
                <button type="button" class="btn btn-primary" id="editProfileBtn">
                    <i class="bi bi-pencil me-1"></i> Chỉnh sửa
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let profiles = [];
    let selectedProfile = null;
    
    // Tải danh sách profiles
    function loadProfiles() {
        document.getElementById('profilesList').innerHTML = `
            <tr>
                <td colspan="7" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Đang tải...</span>
                    </div>
                    <p class="mt-2">Đang tải danh sách profile...</p>
                </td>
            </tr>
        `;
        
        fetch('/api/profiles')
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                return response.json();
            })
            .then(data => {
                profiles = data;
                displayProfiles(profiles);
            })
            .catch(error => {
                console.error('Lỗi khi tải profiles:', error);
                document.getElementById('profilesList').innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center text-danger">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            Không thể tải danh sách profiles: ${error.message}
                        </td>
                    </tr>
                `;
            });
    }
    
    // Hiển thị danh sách profiles
    function displayProfiles(data) {
        const tbody = document.getElementById('profilesList');
        tbody.innerHTML = '';
        
        if (!data || data.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="7" class="text-center">
                        <i class="bi bi-info-circle-fill me-2 text-info"></i>
                        Chưa có profile nào. Hãy thêm profile mới từ trang "Game App Profiles".
                    </td>
                </tr>
            `;
            return;
        }
        
        // Sắp xếp theo ID
        data.sort((a, b) => a.id - b.id);
        
        data.forEach(profile => {
            const tr = document.createElement('tr');
            
            // Xác định trạng thái và badge tương ứng
            let statusBadge = `<span class="badge bg-secondary">Không xác định</span>`;
            if (profile.status) {
                if (profile.status === 'Running') {
                    statusBadge = `<span class="badge bg-success">Đang chạy</span>`;
                } else if (profile.status === 'Ready') {
                    statusBadge = `<span class="badge bg-primary">Sẵn sàng</span>`;
                } else if (profile.status === 'Stopped') {
                    statusBadge = `<span class="badge bg-secondary">Đã dừng</span>`;
                } else {
                    statusBadge = `<span class="badge bg-info">${profile.status}</span>`;
                }
            }
            
            // Định dạng thời gian chạy cuối
            let lastRunFormatted = 'Chưa chạy';
            if (profile.lastRun) {
                try {
                    const lastRunDate = new Date(profile.lastRun);
                    lastRunFormatted = lastRunDate.toLocaleString('vi-VN');
                } catch (e) {
                    console.warn('Lỗi định dạng thời gian:', e);
                    lastRunFormatted = profile.lastRun;
                }
            }
            
            // Cắt ngắn đường dẫn nếu quá dài
            const truncatedPath = profile.installDirectory && profile.installDirectory.length > 30 
                ? profile.installDirectory.substring(0, 30) + '...'
                : (profile.installDirectory || 'N/A');
            
            tr.innerHTML = `
                <td>${profile.id}</td>
                <td class="fw-bold">${profile.name || 'Không có tên'}</td>
                <td>${profile.appID || 'N/A'}</td>
                <td title="${profile.installDirectory || ''}">${truncatedPath}</td>
                <td>${statusBadge}</td>
                <td>${lastRunFormatted}</td>
                <td>
                    <div class="btn-group btn-group-sm">
                        <button type="button" class="btn btn-info view-btn" data-id="${profile.id}" title="Xem chi tiết">
                            <i class="bi bi-eye"></i>
                        </button>
                        <button type="button" class="btn btn-primary edit-btn" data-id="${profile.id}" title="Chỉnh sửa">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button type="button" class="btn btn-danger delete-btn" data-id="${profile.id}" title="Xóa">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </td>
            `;
            
            tbody.appendChild(tr);
        });
        
        // Thêm event listeners cho các nút
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = parseInt(this.getAttribute('data-id'));
                viewProfileDetails(id);
            });
        });
        
        document.querySelectorAll('.edit-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = parseInt(this.getAttribute('data-id'));
                editProfile(id);
            });
        });
        
        document.querySelectorAll('.delete-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const id = parseInt(this.getAttribute('data-id'));
                confirmDeleteProfile(id);
            });
        });
    }
    
    // Xem chi tiết profile
    function viewProfileDetails(id) {
        const profile = profiles.find(p => p.id === id);
        if (!profile) return;
        
        selectedProfile = profile;
        
        // Điền thông tin vào modal
        document.getElementById('detail-id').textContent = profile.id;
        document.getElementById('detail-name').textContent = profile.name || 'Không có tên';
        document.getElementById('detail-appid').textContent = profile.appID || 'N/A';
        document.getElementById('detail-path').textContent = profile.installDirectory || 'N/A';
        document.getElementById('detail-status').textContent = profile.status || 'Không xác định';
        document.getElementById('detail-account').textContent = profile.anonymousLogin ? 'Ẩn danh' : (profile.steamUsername ? 'Có tài khoản' : 'Không có');
        document.getElementById('detail-arguments').textContent = profile.arguments || 'Không có';
        
        // Định dạng thời gian chạy cuối
        let lastRunFormatted = 'Chưa chạy';
        if (profile.lastRun) {
            try {
                const lastRunDate = new Date(profile.lastRun);
                lastRunFormatted = lastRunDate.toLocaleString('vi-VN');
            } catch (e) {
                console.warn('Lỗi định dạng thời gian:', e);
                lastRunFormatted = profile.lastRun;
            }
        }
        document.getElementById('detail-lastrun').textContent = lastRunFormatted;
        
        // Cập nhật tiêu đề modal
        document.getElementById('detailsModalLabel').textContent = `Chi tiết Profile: ${profile.name || 'Không có tên'}`;
        
        // Hiển thị modal
        const modal = new bootstrap.Modal(document.getElementById('detailsModal'));
        modal.show();
    }
    
    // Chỉnh sửa profile
    function editProfile(id) {
        // Chuyển hướng đến trang Profiles với query param edit
        window.location.href = `/Profiles?edit=${id}`;
    }
    
    // Xác nhận xóa profile
    function confirmDeleteProfile(id) {
        const profile = profiles.find(p => p.id === id);
        if (!profile) return;
        
        selectedProfile = profile;
        document.getElementById('deleteGameName').textContent = profile.name || 'Không có tên';
        
        const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        modal.show();
    }
    
    // Xóa profile
    function deleteProfile() {
        if (!selectedProfile) return;
        
        // Hiển thị loading trong nút xóa
        const deleteBtn = document.getElementById('confirmDeleteBtn');
        const originalText = deleteBtn.innerHTML;
        deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xóa...';
        deleteBtn.disabled = true;
        
        fetch(`/api/profiles/${selectedProfile.id}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            
            // Đóng modal
            bootstrap.Modal.getInstance(document.getElementById('deleteConfirmModal')).hide();
            
            // Hiển thị thông báo thành công
            const toast = document.createElement('div');
            toast.classList.add('position-fixed', 'bottom-0', 'end-0', 'p-3');
            toast.style.zIndex = 1070;
            
            toast.innerHTML = `
                <div class="toast align-items-center text-white bg-success" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            <i class="bi bi-check-circle-fill me-2"></i>
                            Đã xóa profile "${selectedProfile.name || 'Không có tên'}" thành công
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(toast);
            const toastEl = new bootstrap.Toast(toast.querySelector('.toast'), { delay: 3000 });
            toastEl.show();
            
            // Tải lại danh sách
            loadProfiles();
        })
        .catch(error => {
            console.error('Lỗi khi xóa profile:', error);
            alert('Đã xảy ra lỗi khi xóa profile!');
        })
        .finally(() => {
            // Khôi phục nút xóa
            deleteBtn.innerHTML = originalText;
            deleteBtn.disabled = false;
        });
    }
    
    // Sao chép profile
    function copyProfile() {
        if (!selectedProfile) return;
        
        // Sao chép thông tin vào clipboard
        const profileData = {
            id: selectedProfile.id,
            name: selectedProfile.name,
            appID: selectedProfile.appID,
            installDirectory: selectedProfile.installDirectory,
            steamUsername: selectedProfile.steamUsername,
            steamPassword: selectedProfile.steamPassword,
            arguments: selectedProfile.arguments,
            anonymousLogin: selectedProfile.anonymousLogin
        };
        
        navigator.clipboard.writeText(JSON.stringify(profileData, null, 2))
            .then(() => {
                // Hiển thị thông báo
                const toast = document.createElement('div');
                toast.classList.add('position-fixed', 'bottom-0', 'end-0', 'p-3');
                toast.style.zIndex = 1070;
                
                toast.innerHTML = `
                    <div class="toast align-items-center text-white bg-success" role="alert" aria-live="assertive" aria-atomic="true">
                        <div class="d-flex">
                            <div class="toast-body">
                                <i class="bi bi-clipboard-check-fill me-2"></i>
                                Đã sao chép thông tin profile "${selectedProfile.name || 'Không có tên'}" vào clipboard
                            </div>
                            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                        </div>
                    </div>
                `;
                
                document.body.appendChild(toast);
                const toastEl = new bootstrap.Toast(toast.querySelector('.toast'), { delay: 3000 });
                toastEl.show();
                
                // Đóng modal
                bootstrap.Modal.getInstance(document.getElementById('detailsModal')).hide();
            })
            .catch(err => {
                console.error('Không thể sao chép profile:', err);
                alert('Đã xảy ra lỗi khi sao chép profile!');
            });
    }
    
    // Khi trang được tải
    document.addEventListener('DOMContentLoaded', function() {
        // Tải danh sách profiles
        loadProfiles();
        
        // Thêm sự kiện cho nút làm mới
        document.getElementById('refreshBtn').addEventListener('click', loadProfiles);
        
        // Thêm sự kiện cho nút xác nhận xóa
        document.getElementById('confirmDeleteBtn').addEventListener('click', deleteProfile);
        
        // Thêm sự kiện cho nút chỉnh sửa trong modal chi tiết
        document.getElementById('editProfileBtn').addEventListener('click', function() {
            if (selectedProfile) {
                editProfile(selectedProfile.id);
            }
        });
        
        // Thêm sự kiện cho nút sao chép trong modal chi tiết
        document.getElementById('copyProfileBtn').addEventListener('click', copyProfile);
    });
</script>

<style>
    /* Cải thiện giao diện bảng */
    .table {
        border-collapse: separate;
        border-spacing: 0;
    }
    
    .table thead th {
        background-color: var(--steam-blue);
        color: var(--steam-light-blue);
        border-bottom: 2px solid var(--steam-light-blue);
        padding: 12px 8px;
    }
    
    .table tbody tr {
        transition: background-color 0.2s ease;
    }
    
    .table tbody tr:hover {
        background-color: rgba(102, 192, 244, 0.1);
    }
    
    /* Hiệu ứng cho các nút */
    .btn-group .btn {
        transition: transform 0.2s;
    }
    
    .btn-group .btn:hover {
        transform: translateY(-2px);
    }
    
    /* Làm đẹp modal */
    .modal-content {
        border: 1px solid var(--steam-light-blue);
        box-shadow: 0 0 20px rgba(102, 192, 244, 0.3);
    }
    
    .modal-header {
        border-bottom: 2px solid var(--steam-light-blue);
    }
    
    .modal-footer {
        border-top: 1px solid #444;
    }
</style>
}